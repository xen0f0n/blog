{
  
    
        "post0": {
            "title": "Deploying a Telegram Bot on Heroku to auto-post stoic quotes in a Telegram Channel",
            "content": "For the last few months I’ve been following @dailystoic and now, while doomscrolling, I get my daily stoic wisdom one-quote-at-a-time. More recently I read Marcus Aurelius’s “Meditations”. I can’t really say that @dailystoic was the reason for buying the book, since it’d been in my wishlist for a long time, but it certainly gave me a *daily reminder. . Being a telegram user, I’ve subscribed to a few channels like linuxgram and showerthoughts. Motivated by my recent interest in stoicism I decided as a tiny-project to try and write a simple telegram bot and use it to auto-post stoic quotes in a channel on telegram. . Create your telegram bot (and channel) . . Documentation is simple and clear: . “Just talk to BotFather” | “Use the /newbot command to create a new bot. The BotFather will ask you for a name and username, then generate an authorization token for your new bot.” | “The token is a string along the lines of 110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsa that is required to authorize the bot and send requests to the Bot API. Keep your token secure and store it safely, it can be used by anyone to control your bot.” | . A channel is easily created within the telegram app. A unique id defines the channel (I guess it’s just its name - for me: @stoic_quotes) . Our bot needs admin rights in order to be able to post to the channel. So, we have to add it to the channel and make it an admin. . Code . (Presented code can be found here.) . Quotes are stored in a json file in the following format and a single quote is selected randomly each time. . { &quot;quotes&quot;: [ { &quot;text&quot;: &quot;If anyone tells you that a certain person speaks ill of you, do not make excuses about what is said of you but answer, &quot;He was ignorant of my other faults, else he would not have mentioned these alone. &quot;&quot;, &quot;author&quot;: &quot;Epictetus&quot; }, { &quot;text&quot;: &quot;Wealth consists not in having great possessions, but in having few wants.&quot;, &quot;author&quot;: &quot;Epictetus&quot; }, { &quot;text&quot;: &quot;There is only one way to happiness and that is to cease worrying about things which are beyond the power or our will.&quot;, &quot;author&quot;: &quot;Epictetus&quot; } ... . import json from random import randint def get_quote(): with open(&#39;quotes.json&#39;) as f: quotes = json.load(f)[&#39;quotes&#39;] rand_index = randint(0, len(quotes) - 1) return list(quotes[rand_index].values()) # [quote, author] . I used two libraries: . python-telegram-bot and | scheduler (created by danBader) | . In order to keep the bot’s token secret (and not have it publicly on github), we can access it through an environment variable (config vars on Heroku). . There is no interaction with the bot through commands (/start, /help, etc). Its only purpose is to automate posting in our channel. . from telegram import Bot import schedule import os from utils import get_quote def post_quote(): # get bot and channel ids from env variables bot_token = os.environ.get(&#39;BOT_TOKEN&#39;) channel_id = os.environ.get(&#39;CHANNEL_ID&#39;) quote, author = get_quote() message = f&#39;{quote} n n{author}&#39; # format quote bot = Bot(token=bot_token) bot.sendMessage(chat_id=channel_id, text=message) if __name__ == &#39;__main__&#39;: schedule.every(8).hours.do(post_quote).tag(&#39;stoic-quote&#39;) while 1: schedule.run_pending() . :exclamation: You will have to create a github repo and push the code there in order to connect it directly to Heroku later. . Deploy on Heroku . (For this step you will need a Heroku account) . Create a new Heroku app . Once logged in, select New –&gt; Create new app and name it. After that, select GitHub as the Deployment method, and search for the target github repo. . Heroku needs a couple of things included to our repo in order to work: . runtime.txt | requirements.txt | Procfile | . runtime.txt is optional and it’s used to specify the python runtime. In our case python-3.6.9. Otherwise Heroku resorts to a default runtime. . requirements.txt includes our external python libraries (‘dynos’ aka Heroku containers need to know what to install) . Procfile is used to execute a command on dyno’s startup. In our case we need to run scheduler.py, Procfile contains the line: . worker: python scheduler.py . (worker is one of the available process types) . Having done all that and pushed into our github repo, there are a couple of things left. . Remember our secret token? We are going to store it using Heroku’s Config Vars (under Settings) which “are exposed to our app’s code as environment variables”. | . . On the Deploy tab, we choose the branch to deploy and whether we prefer Automatic Deploys (auto deploy every time something is pushed into that branch). | . :warning: Finaly, make sure you change the worker status to ON. (under the Overview tab). Otherwise, the worker in our Procfile will never run our script. . . :octocat: Github repo Stoic Quotes Telegram Channel . You have power over your mind - not outside events. Realize this, and you will find strength` ~ Marcus Aurelius .",
            "url": "https://xen0f0n.github.io/blog/2020/12/31/bot-to-autopost-in-a-telegram-channel.html",
            "relUrl": "/2020/12/31/bot-to-autopost-in-a-telegram-channel.html",
            "date": " • Dec 31, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "My experience running a small programming group for almost a year",
            "content": "In October last year, I attended a programming group meeting, held by our university IEEE Student Branch. Although at the time the group had been running for at least a year, there were some freshmen university students attending for the first (or second) time. There were slides and algorithms and code written in C++ and I noticed that these freshmen didn’t understand all those things. . So, in the same evening I volunteered to run the little league. A small group with those five younger students who wanted to learn programming outside the university classrooms. For the last couple of years, Python has been my preferable programming language. And it seemed appropriate for the little league. . The plan – we’d spend time introducing the syntax and solving easy puzzles to familiaze with the language and in the best case scenario we would later learn how to do visualizations and how to use an API (to send emails, get the price for the next flight to Amsterdam, print a Star Wars quote, etc). . Sneak peek into the end of the year’s meetings: Visualizations didn’t work that well, and only two students worked with the API we chose. . The group meetings started in October and ended in May and we used mainly two tools/platforms: Jupyter Notebooks (Microsoft Azure Notebooks) and codewars.com. . I didn’t want to install an IDE and explain pip/conda and virtual environments. At least not right at the beginning. And I believe it worked fine as we only installed PyCharm during the last month for debugging the code we wrote while working on an API. . So, Jupyter Notebooks. I would prepare Notebooks with new material and examples and present them during meetings. Sometimes I would publish some exercises and even write assertions after each block of code so they would be able to check their work on their own. And all that inside a Jupyter Notebook. It was great, easy and really useful. . Furthermore, the Microsoft Azure Notebooks platform offered the convenience of cloning a library. I would publish some new notebooks and the rest of the group would just clone my library and get the latest version. . The second platform we used that really panned out was codewars.com. Basically, it’s a place where you can solve puzzles (like CheckIO, CodinGame, HackerRank, etc). The thing that led me to choose this platform was the vast number of puzzles. Because puzzles are created by the community itself, there are thousands of them. At first I would work on some puzzles and then send them to the group. After some time, students suggested which puzzles to solve. . We either solved them during meetings, or solved them at home. We even created a clan. The platform gives you the ability to state to which clan you belong. Our clan was named ieee.xanthi. . That’s how we used most of our time. . I really wanted to show them something cool they could do using Python and I tried that with visualizations. My ambitious plan was to eventually use some data from a data visualization competition on Reddit called DataViz Battle. Long story short, I used an API to project some data on a map but I guess it was kind of tricky and the group couldn’t follow. I used matplotlib to create some plots but matplotlib didn’t work out for us either. . Closing to the end of the year’s meetings we moved on to APIs. That’s something cool, right? During a meeting I explained what an API is, what endpoints are and tried some of them through the rapidAPI platform. After that, I figured that we’d need a simple, well documented and clean API to use. Surprisingly, the API on the codewars platform seemed like a really good choice! It’s simple, it’s clean and you can build upon it! Moreover, to build upon it, combine data from different requests and make pie charts out of the data we’d get, we used much of the things we’d seen so far. . For example, I had them write a function that would get the names of two users, request through the API the puzzles solved by each one of them and return the names of those that were yet unsolved by each user. . Another one was to get the difficulty level for each one of a user’s solved puzzles and draw a pie chart using them. . In retrospect, I’d do some things differently. Mainly, I’d try a pseudocode-centric and not Python-centric approach. During those months I sensed that what freshmen students lack is algorithmic thinking. If it’s hard to figure out a basic algorithm that tests if a number is prime or not, then we should focus on that first and on code implementation later. . Here is the link for my library on the Microsoft Azure Notebooks platform. . All in all, even though only two out of the five members of the group really followed along until the very end… . .",
            "url": "https://xen0f0n.github.io/blog/2019/08/25/running_a_small_programming_group.html",
            "relUrl": "/2019/08/25/running_a_small_programming_group.html",
            "date": " • Aug 25, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://xen0f0n.github.io/blog/_pages/about.html",
          "relUrl": "/_pages/about.html",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://xen0f0n.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}